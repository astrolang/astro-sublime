%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Astro
file_extensions:
  - astro
  - ast
scope: source.astro
contexts:
  main:

    - match: ^\s*-\s+[^>].*$ # non_astro
      scope: comment.line.number-sign.astro
      name: non_astro

    - match: \b0x(_?[A-Fa-f0-9])*((\.(_?[A-Fa-f0-9])+)?(p[+-]?)?[A-Fa-f0-9_]+)? # hexadecimal_numbers
      scope: constant.numeric.astro
      name: hexadecimal_numbers

    - match: \b0o(_?[0-8])*((\.(_?[0-8])+)?(p[+-]?)?[0-8_]+)? # octal_numbers
      scope: constant.numeric.astro
      name: octal_numbers

    - match: \b0b(_?[01])*((\.(_?[01])+)?(p[+-]?)?[01_]+)? # binary_numbers
      scope: constant.numeric.astro
      name: binary_numbers

    - match: \b[0-9](_?[0-9])*((\.(_?[0-9])+)?(e[+-]?)?(_?[0-9])+)? # decimal_numbers
      scope: constant.numeric.astro
      name: decimal_numbers

    - match: \@(?:[A-Za-z_][_A-Za-z0-9]*)|@\(.+\) # macros
      scope: support.function.macro.astro
      name: macros

    - match: (\(.+\)|[A-Za-z_0-9]+)\s*(?=\=\>) # lambdas
      scope: entity.name.function.astro
      name: lambdas

    - match: (#-) # multiline_comments
      push: multiline_comments

    - match: (#).*$ # single_line_comments
      scope: comment.line.number-sign.astro
      name: single_line_comments

    - match: (::|>:|<:) # type_annotation
      push: type_annotation

    - match: (?<!\.)((\.|:)[A-Za-z_][_A-Za-z0-9]*!?\.?) # dot_notation
      scope: constant.numeric.astro
      name: dot_notation

    - match: \b(true|false|nil)\b # constant_keywords
      scope: constant.language.astro
      name: constant_keywords

    - match: \b(?:for|end|if|where|\?|else|elif|async|await|return|delegate|yield|from|while|do|loop|try|ensure|defer|raise|continue|break|fallthrough|pass|export|except|import)\b # control_keywords
      scope: keyword.control.astro
      name: control_keywords

    - match: \b(?:type|fun|let|var|NaN|iso|ref|const|as)\b # declaration_keywords
      scope: storage.modifier.astro
      name: declaration_keywords

    - match: (([A-Za-z_][_A-Za-z0-9]*|(=|\||\&|\>|\<|!|\+|-|\*|\/|\^|%|\?|≥|≤|≠|≈|×|±|÷)+)!?\.?)(?=\s*(\{.+\}\s*)?\() # function_calls
      scope: entity.name.function.astro
      name: function_calls

    - match: :(?=\() # function_calls_extended_notation
      scope: entity.name.function.astro
      name: function_calls_extended_notation

    - match: ([A-Za-z_][_A-Za-z0-9]*( (?!where )[A-Za-z_][_A-Za-z0-9]*)+\s*(?=[+-/*]?\=)) # multiple_declaration
      scope: astro
      name: multiple_declaration

    - match: (?<!let |var |import )([^\=|\:|\;|,|\.|\<|\>|'|\"|\*|\/|\-|\+|\^|\%|≥|≤|≠|≈|×|±|÷|\\|\}|\{|\)|\(|\!|\&|\$|\@|\||\~|type|fun|let|var|as|for|end|if|where|\?|else|elif|async|await|return|yield|from|while|do|with|loop|try|ensure|defer|raise|continue|break|fallthrough|pass|export|except|import|const|NaN|iso|ref|const|and|or|in|not|mod|is|typeof]|\b[a-zA-Z_][A-Za-z_0-9]*!?)\s+(?=[A-Za-z_0-9]+|\"|'|@|\$|\{|\[|\(|/[^/]+/\s*(?!(\s*[\{\[\(a-zA-Z0-9@$])|=|\||\&|\>|\<|!|\+|-|\*|\/|\^|%|\?|≥|≤|≠|≈|×|±|÷))(?!(if|else|for|end|while|and|or|as|where|iso|ref|in|not|mod|is|typeof|except)\b) # command_notation
      scope: entity.name.function.astro
      name: command_notation

    - match: (?<=[_a-zA-Z0-9})\]])' # unquoted
      scope: support.function.macro.astro
      name: unquoted

    - match: \"\"\" # multiline_single_quoted_string
      scope: punctuation.definition.string.begin.astro
      push: multiline_double_quoted_string

    - match: \'\'\' # multiline_single_quoted_string
      scope: punctuation.definition.string.begin.astro
      push: multiline_single_quoted_string

    - match: \" # double_quoted_string
      scope: punctuation.definition.string.begin.astro
      push: double_quoted_string

    - match: \' # single_quoted_string
      scope: punctuation.definition.string.begin.astro
      push: single_quoted_string

    - match: /[^/]+/\s*(?!(\s*[\{\[\(a-zA-Z0-9@$])|=|\||\&|\>|\<|!|\+|-|\*|\/|\^|%|\?|≥|≤|≠|≈|×|±|÷) # regex
      scope: string.quoted.single.astro
      name: regex

    - match: \.?(=|\||\&|\>|\<|!|\+|-|\*|\/|\^|%|\?|≥|≤|≠|≈|×|±|÷)+|\b(and|or|not|mod|typeof)\b # operators
      scope: keyword.operator.astro
      name: operators

  double_quoted_string:
    - meta_scope: string.quoted.double.astro
    - match: \\(t|n|r|b|q|\"|'|\$|\\)
      scope: constant.character.escape.astro
    - match: \$[A-Za-z_][A-Za-z0-9_]*
      scope: constant.character.escape.astro
    - match: \$(|.+|)?\{
      push: string_interpolate
    - match: \"
      scope: punctuation.definition.string.end.astro
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.astro
    - match: \\(t|n|r|b|q|\"|'|\$|\\)
      scope: constant.character.escape.astro
    - match: \$[A-Za-z_][A-Za-z0-9_]*
      scope: constant.character.escape.astro
    - match: \$(|.+|)?\{
      push: string_interpolate
    - match: \'
      scope: punctuation.definition.string.end.astro
      pop: true

  multiline_double_quoted_string:
    - meta_scope: string.quoted.double.astro
    - match: \"\"\"
      scope: punctuation.definition.string.end.astro
      pop: true

  multiline_single_quoted_string:
    - meta_scope: string.quoted.single.astro
    - match: \'\'\'
      scope: punctuation.definition.string.end.astro
      pop: true

  string_interpolate:
    - meta_scope: constant.character.escape.astro
    - match: \}
      pop: true
    - include: main

  multiline_comments:
    - meta_scope: comment.line.block.astro
    - match: (#-)
      push: multiline_comments
    - match: -#
      pop: true

  type_annotation:
    - meta_scope: comment.line.block.astro
    - match: (?=;|$)
      pop: true
